import React from 'react';

import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import { withRelay, RelayProps } from 'relay-nextjs';
import { graphql, usePreloadedQuery } from 'react-relay';
import { getClientEnvironment } from '@/lib/client';
import { pages_HelloQuery } from '@/lib/shared/__generated__/pages_HelloQuery.graphql';

const HelloQuery = graphql`
  query pages_HelloQuery($name: String!) {
    hello(name: $name)
  }
`;

function Home({ preloadedQuery }: RelayProps<{}, pages_HelloQuery>) {
  const query = usePreloadedQuery(HelloQuery, preloadedQuery);


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
   
      <main className={styles.main}>
        <h1>{query.hello}</h1>
      </main>
    </div>
  );
}


function Loading() {
  return <div>Loading...</div>;
}

export default withRelay(Home, HelloQuery, {
  fallback: <Loading />,
  // Create a Relay environment on the client-side.
  // Note: This function must always return the same value.
  createClientEnvironment: () => getClientEnvironment()!,
  // serverSideProps: async (ctx) => {
  //   // This is an example of getting an auth token from the request context.
  //   // If you don't need to authenticate users this can be removed and return an
  //   // empty object instead.
  //   const { getTokenFromCtx } = await import('lib/server/auth');
  //   const token = await getTokenFromCtx(ctx);
  //   if (token == null) {
  //     return {
  //       redirect: { destination: '/login', permanent: false },
  //     };
  //   }

  //   return { token };
  // },
  variablesFromContext: () => ({ name: 'from Server!'}),
  // Server-side props can be accessed as the second argument
  // to this function.
  createServerEnvironment: async (
    ctx,
    // The object returned from serverSideProps
    // { token }: { token: string }
  ) => {
    const { createServerEnvironment } = await import('@/lib/server');
    return createServerEnvironment();
  },
});